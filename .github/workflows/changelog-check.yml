name: "Release Validation"

on:
  pull_request:
    branches: [ main ]

jobs:
  validate-release:
    name: "Validate Release Requirements"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check release requirements
        run: |
          # Test comment to trigger validation
          # Get the list of changed files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          
          echo "Changed files in this PR:"
          echo "$CHANGED_FILES"
          echo ""
          
          # ALL changes to main require changelog updates
          USER_FACING_CHANGES=true
          RELEASE_CHANGES=false
          
          # Check if this looks like a release PR (version changes)
          if echo "$CHANGED_FILES" | grep "composer.json" > /dev/null; then
            # Check if version was changed in composer.json
            if git diff origin/main...HEAD composer.json | grep -E '^\+.*"version"' > /dev/null; then
              RELEASE_CHANGES=true
              echo "üè∑Ô∏è  Version change detected in composer.json - this appears to be a release PR"
            fi
          fi
          
          # Check for changelog modifications
          CHANGELOG_MODIFIED=false
          if echo "$CHANGED_FILES" | grep "CHANGELOG.md" > /dev/null; then
            CHANGELOG_MODIFIED=true
          fi
          
          # Validation logic
          VALIDATION_FAILED=false
          
          # If this is a release PR, both changelog and version must be updated
          if [ "$RELEASE_CHANGES" = true ]; then
            echo ""
            echo "üîç Release PR validation:"
            
            if [ "$CHANGELOG_MODIFIED" = true ]; then
              echo "‚úÖ CHANGELOG.md was updated"
            else
              echo "‚ùå CHANGELOG.md was NOT updated"
              echo "   Release PRs must include changelog updates"
              VALIDATION_FAILED=true
            fi
            
            # Check if a new version section was added to changelog
            if [ "$CHANGELOG_MODIFIED" = true ]; then
              # Look for a new version section (not just Unreleased)
              if git diff origin/main...HEAD CHANGELOG.md | grep -E '^\+## \[[0-9]+\.[0-9]+\.[0-9]+\]' > /dev/null; then
                echo "‚úÖ New version section added to CHANGELOG.md"
              else
                echo "‚ùå No new version section found in CHANGELOG.md"
                echo "   Release PRs should add a new version section, not just update [Unreleased]"
                echo ""
                echo "   To prepare a release:"
                echo "   1. Run: bash build/version.sh to get the next version"
                echo "   2. Update composer.json with the new version"
                echo "   3. Run: bash build/update-changelog.sh VERSION to update CHANGELOG.md"
                VALIDATION_FAILED=true
              fi
            fi
            
          # All non-release PRs require changelog update
          elif [ "$USER_FACING_CHANGES" = true ]; then
            echo ""
            echo "üîç Changelog validation:"
            
            if [ "$CHANGELOG_MODIFIED" = true ]; then
              echo "‚úÖ CHANGELOG.md was updated"
            else
              echo "‚ùå CHANGELOG.md was not updated"
              echo ""
              echo "All PRs to main require a changelog entry."
              echo ""
              echo "Please update CHANGELOG.md with:"
              echo "1. Add your changes under the [Unreleased] section"
              echo "2. Follow the Keep a Changelog format"
              echo "3. Use appropriate categories: Added, Changed, Deprecated, Removed, Fixed, Security"
              echo ""
              echo "Example:"
              echo "## [Unreleased]"
              echo ""
              echo "### Added"
              echo ""
              echo "- Your new feature description"
              VALIDATION_FAILED=true
            fi
          fi
          
          echo ""
          if [ "$VALIDATION_FAILED" = true ]; then
            echo "‚ùå Validation failed - please address the issues above"
            exit 1
          else
            echo "‚úÖ All validation checks passed!"
          fi